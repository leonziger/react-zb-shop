{"version":3,"sources":["components/Header/Header.js","components/About/About.js","components/Cart/Cart.js","components/Main/Aside/Aside.js","components/Main/Content/Content.js","components/Main/Main.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["AntdHeader","Layout","Header","Paragraph","Typography","style","backgroundColor","color","minHeight","display","className","justifyContent","href","About","Cart","Sider","Aside","minWidth","padding","borderRight","AndtContent","Content","Main","borderLeft","AntdFooter","Footer","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAIgBA,EAAeC,IAAvBC,OACAC,EAAcC,IAAdD,UAEKD,EAAS,WACpB,OACE,kBAACF,EAAD,CAAYK,MAAO,CAAEC,gBAAiB,OAAQC,MAAO,QAASC,UAAW,OAAQC,QAAS,SACxF,yBAAKC,UAAU,gCACb,kBAACP,EAAD,CAAWE,MAAO,CAAEI,QAAS,OAAQE,eAAgB,kBACnD,uBAAGC,KAAK,IAAIF,UAAU,cAAtB,8CACA,uBAAGE,KAAK,YAAYF,UAAU,cAA9B,wCACA,uBAAGE,KAAK,QAAQF,UAAU,cAA1B,kDCVGG,EAAQ,WACnB,OACE,kBAAC,IAAD,CAAQH,UAAU,eAAlB,+HCFSI,EAAO,WAClB,OACE,kBAAC,IAAD,CAAQJ,UAAU,eAAlB,iGCFIK,EAAUd,IAAVc,MAEKC,EAAQ,WACnB,OACE,kBAACD,EAAD,CAAOV,MAAO,CAAEY,SAAU,QAAST,UAAW,QAASU,QAAS,OAAQC,YAAa,mBAArF,oFCJaC,EAAgBnB,IAAzBoB,QAEKA,EAAU,WACrB,OACE,kBAACD,EAAD,CAAaf,MAAO,CAAEa,QAAS,SAA/B,yCCFSI,EAAO,WAClB,OACE,kBAAC,IAAD,CAAQjB,MAAO,CAAEI,QAAS,OAAQc,WAAY,iBAAkBJ,YAAa,mBAC3E,kBAAC,EAAD,MACA,kBAAC,EAAD,QCNUK,EAAevB,IAAvBwB,OAEKA,EAAS,WACpB,OACE,kBAACD,EAAD,CAAanB,MAAO,CAAEC,gBAAiB,QAASC,MAAO,QAASC,UAAW,OAAQC,QAAS,SAC1F,yBAAKC,UAAU,gCAAf,qDCCOgB,EAAM,WACjB,OACE,kBAAC,IAAD,CAAQhB,UAAU,QAChB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,KAAK,IAAIC,OAAK,EAACC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,KAAK,iBAAiBC,OAAK,EAACC,UAAWhB,IAC9C,kBAAC,IAAD,CAAOc,KAAK,YAAYE,UAAWP,IACnC,kBAAC,IAAD,CAAOK,KAAK,QAAQE,UAAWf,KAEjC,kBAAC,EAAD,QCRcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c7400077.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout, Typography } from 'antd';\r\nimport '../../App.css';\r\n\r\nconst { Header: AntdHeader } = Layout;\r\nconst { Paragraph } = Typography;\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <AntdHeader style={{ backgroundColor: 'gray', color: 'white', minHeight: '50px', display: 'flex'}}>\r\n      <div className=\"container flex-center-center\">\r\n        <Paragraph style={{ display: 'flex', justifyContent: 'space-between'}}>\r\n          <a href=\"/\" className=\"headerLink\">Главная</a>\r\n          <a href=\"/products\" className=\"headerLink\">Товары</a>\r\n          <a href=\"/cart\" className=\"headerLink\">Корзина</a>\r\n        </Paragraph>\r\n      </div>\r\n    </AntdHeader>\r\n  )\r\n};","import React from 'react';\r\nimport { Layout} from 'antd';\r\nimport '../../App.css';\r\n\r\nexport const About = () => {\r\n  return(\r\n    <Layout className=\"mainContent\">\r\n      Наш замечательный сайт\r\n    </Layout>\r\n  );\r\n};","import React from 'react';\r\nimport { Layout} from 'antd';\r\nimport '../../App.css';\r\n\r\nexport const Cart = () => {\r\n  return(\r\n    <Layout className=\"mainContent\">\r\n      Тут будет корзина\r\n    </Layout>\r\n  );\r\n};","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport '../../../App.css';\r\n\r\nconst { Sider } = Layout;\r\n\r\nexport const Aside = () => {\r\n  return (\r\n    <Sider style={{ minWidth: '200px', minHeight: '200px', padding: '10px', borderRight: '1px solid gray' }}>\r\n      Фильтр товаров\r\n    </Sider>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport '../../../App.css';\r\n\r\nconst { Content: AndtContent } = Layout;\r\n\r\nexport const Content = () => {\r\n  return (\r\n    <AndtContent style={{ padding: '10px'}}>\r\n      Товары\r\n    </AndtContent>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport '../../App.css';\r\nimport { Aside } from './Aside/Aside';\r\nimport { Content } from './Content/Content';\r\n\r\nexport const Main = () => {\r\n  return (\r\n    <Layout style={{ display: 'flex', borderLeft: '1px solid gray', borderRight: '1px solid gray'}}>\r\n      <Aside />\r\n      <Content/>\r\n    </Layout>\r\n  );\r\n};","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport '../../App.css';\r\n\r\nconst { Footer: AntdFooter } = Layout;\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <AntdFooter  style={{ backgroundColor: 'black', color: 'white', minHeight: '50px', display: 'flex'}}>\r\n      <div className=\"container flex-center-center\">\r\n        Футер. Copyright 2020.\r\n      </div>\r\n    </AntdFooter>\r\n  )\r\n};","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Layout } from 'antd';\nimport './App.css';\nimport { Header} from './components/Header/Header';\nimport { About} from './components/About/About';\nimport { Cart } from './components/Cart/Cart';\nimport { Main} from './components/Main/Main';\nimport { Footer} from './components/Footer/Footer';\n\nexport const App = () => {\n  return (\n    <Layout className=\"main\">\n      <Header />\n      <Router>\n        <Route path=\"/\" exact component={About} />\n        <Route path=\"/react-zb-shop\" exact component={About} />\n        <Route path=\"/products\" component={Main} />\n        <Route path=\"/cart\" component={Cart} />\n      </Router>\n      <Footer />\n    </Layout>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}