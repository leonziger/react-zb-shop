{"version":3,"sources":["components/Header/Header.js","components/About/About.js","components/Cart/Cart.js","components/Main/Aside/Aside.js","components/Main/ProductList/ProductItem/ProductItem.js","components/Main/ProductList/ProductList.js","components/Main/Main.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["AntdHeader","Layout","Header","style","backgroundColor","color","minHeight","display","className","justifyContent","exact","to","About","Cart","Sider","Aside","minWidth","padding","borderRight","Meta","CardComponent","ProductItem","item","useState","isFlipped","onUpdateFlipped","onClick","key","id","hoverable","width","cover","alt","src","image","height","title","name","data","ProductList","map","el","span","Main","borderLeft","AntdFooter","Footer","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa947fe7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { BrowserRouter as Router, NavLink } from 'react-router-dom';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport '../../App.css';\r\n\r\nconst { Header: AntdHeader } = Layout;\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <AntdHeader style={{ backgroundColor: 'gray', color: 'white', minHeight: '50px', display: 'flex'}}>\r\n      <div className=\"container flex-center-center\">\r\n        <nav style={{ display: 'flex', justifyContent: 'space-between'}}>\r\n          <NavLink exact to=\"/\" className=\"headerLink\">Главная</NavLink>\r\n          <NavLink to=\"/products\" className=\"headerLink\">Товары</NavLink>\r\n          <NavLink to=\"/cart\" className=\"headerLink\">Корзина</NavLink>\r\n        </nav>\r\n      </div>\r\n    </AntdHeader>\r\n  )\r\n};","import React from 'react';\r\nimport { Layout} from 'antd';\r\nimport '../../App.css';\r\n\r\nexport const About = () => {\r\n  return(\r\n    <Layout className=\"mainContent\">\r\n      Наш замечательный сайт\r\n    </Layout>\r\n  );\r\n};","import React from 'react';\r\nimport { Layout} from 'antd';\r\nimport '../../App.css';\r\n\r\nexport const Cart = () => {\r\n  return(\r\n    <Layout className=\"mainContent\">\r\n      Тут будет корзина\r\n    </Layout>\r\n  );\r\n};","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport '../../../App.css';\r\n\r\nconst { Sider } = Layout;\r\n\r\nexport const Aside = () => {\r\n  return (\r\n    <Sider style={{ minWidth: '200px', minHeight: '200px', padding: '10px', borderRight: '1px solid gray' }}>\r\n      Фильтр товаров\r\n    </Sider>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card as CardComponent } from 'antd';\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\nconst { Meta } = CardComponent;\r\n\r\nexport const ProductItem = ({ item }) => {\r\n  const [isFlipped, onUpdateFlipped] = useState(false);\r\n\r\n  const onClick = () => {\r\n    onUpdateFlipped(!isFlipped)\r\n  };\r\n\r\n  return (\r\n    <ReactCardFlip isFlipped={isFlipped}>\r\n      <CardComponent\r\n        key={item.id}\r\n        hoverable\r\n        style={{ width: '240px' }}\r\n        cover={<img alt=\"example\" src={item.image} style={{ width: '240px', height: '300px' }} />}\r\n        onClick={onClick}\r\n      >\r\n        <Meta title={item.name} />\r\n      </CardComponent>\r\n\r\n      <CardComponent\r\n        key={item.id}\r\n        hoverable\r\n        style={{ width: '240px' }}\r\n        cover={<img alt=\"example\" src={item.image} style={{ width: '240px', height: '300px' }} />}\r\n        onClick={onClick}\r\n      >\r\n        <Meta title=\"back\" />\r\n      </CardComponent>\r\n    </ReactCardFlip>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Layout, Row, Col } from 'antd';\r\nimport { ProductItem } from './ProductItem/ProductItem';\r\n\r\nconst data = [\r\n  {\r\n    id: 1,\r\n    name: \"шарик\",\r\n    image: \"https://heroeswm-uvz.at.ua/imgs/katalog_statey/tumblr_m07iyfLy0F1qce1ag.jpg\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"футболка\",\r\n    image: \"https://i.pinimg.com/originals/da/8b/d1/da8bd1d87e3e7c8d708571515fdc2725.jpg\"\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"шарик 2\",\r\n    image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Heart_coraz%C3%B3n.svg/1200px-Heart_coraz%C3%B3n.svg.png\"\r\n  }\r\n]\r\n\r\n\r\nexport const ProductList = () => {\r\n  const renderCart = (item) => (\r\n    <Col span={3} key={item.id}>\r\n      <ProductItem item={item}/>\r\n    </Col>\r\n  )\r\n\r\n  return (\r\n    <Layout style={{ width: '100%', padding: '10px' }}>\r\n      <Row style={{ display: 'flex', justifyContent: 'space-around'}}>\r\n        {\r\n          data.map(el => renderCart(el))\r\n        }\r\n      </Row>\r\n    </Layout>\r\n  )\r\n}","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport '../../App.css';\r\nimport { Aside } from './Aside/Aside';\r\nimport { ProductList } from './ProductList/ProductList';\r\n\r\nexport const Main = () => {\r\n  return (\r\n    <Layout style={{ display: 'flex', borderLeft: '1px solid gray', borderRight: '1px solid gray'}}>\r\n      <Aside />\r\n      <ProductList/>\r\n    </Layout>\r\n  );\r\n};","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport '../../App.css';\r\n\r\nconst { Footer: AntdFooter } = Layout;\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <AntdFooter  style={{ backgroundColor: 'black', color: 'white', minHeight: '50px', display: 'flex'}}>\r\n      <div className=\"container flex-center-center\">\r\n        Магазин каких-то товаров. Copyright 2020.\r\n      </div>\r\n    </AntdFooter>\r\n  )\r\n};","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { Layout } from 'antd';\nimport './App.css';\nimport { Header} from './components/Header/Header';\nimport { About} from './components/About/About';\nimport { Cart } from './components/Cart/Cart';\nimport { Main} from './components/Main/Main';\nimport { Footer} from './components/Footer/Footer';\n\nexport const App = () => {\n  return (\n    <Router>\n      <Layout className=\"main\">\n        <Header />\n\n          <Switch>\n            <Route path=\"/\" exact component={About} />\n            <Route path=\"/react-zb-shop\" exact component={About} />\n            <Route path=\"/products\" component={Main} />\n            <Route path=\"/cart\" component={Cart} />\n          </Switch>\n\n        <Footer />\n      </Layout>\n    </Router>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}